name: Deploy Dashboard API

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/dashboard-api

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew clean bootJar # 임시

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./modules/api/dashboard-api
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          platforms: linux/arm64

  deploy:
    name: Deploy
    runs-on: [self-hosted, dashboard-api]
    needs: build

    defaults:
      run:
        working-directory: ./deploy/prod/dashboard-api

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set environment variables from secrets
        env:
          SECRET_CONTEXT: ${{ toJson(secrets) }}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          to_envs() {
            jq -r "( . // {} ) | to_entries[] | \"\(.key)<<$EOF\n\(.value)\n$EOF\n\""
          }
          echo "$SECRET_CONTEXT" | to_envs >> $GITHUB_ENV

      - name: Generate .env from .env.example
        run: |
          envsubst < .env.example > .env
          echo ".env file created:"
          cat .env

      - name: Deploy with Docker Compose
        env:
          DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |
          docker compose down
          docker compose pull
          docker compose up -d
        
      - name: Docker remove unused images
        run: docker image prune -af

      - name: Check running containers
        run: docker ps -a
