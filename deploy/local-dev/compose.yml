services:
  dashboard-api:
    image: goodpon/dashboard-api:latest
    container_name: dashboard-api
    ports:
      - '8080:8080'
    environment:
      SPRING_PROFILES_ACTIVE: local-dev
      # DB 설정
      DB_URL: ${DB_URL}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      # Redis 설정
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_SSL_ENABLED: ${REDIS_SSL_ENABLED}
      # OpenTelemetry 설정
      OTEL_SERVICE_NAME: dashboard-api
      OTEL_RESOURCE_ATTRIBUTES: service.instance.id=dashboard-api
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://dashboard-api-alloy:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_METRIC_EXPORT_INTERVAL: 30000 # default 60초 -> 30초로 변경
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: 1 # 개발은 1(100%), 운영은 0.1(10%)
      OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true # Micrometer 사용
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  dashboard-api-alloy:
    image: grafana/alloy:latest
    container_name: dashboard-api-alloy
    ports:
      - '12345:12345'
    volumes:
      - ./dashboard-api/alloy/config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    command: >
      run --server.http.listen-addr=0.0.0.0:12345
          --storage.path=/var/lib/alloy/data
          /etc/alloy/config.alloy

  partner-openapi:
    image: goodpon/partner-openapi:latest
    container_name: partner-openapi
    ports:
      - '8081:8080'
    environment:
      SPRING_PROFILES_ACTIVE: local-dev
      # DB 설정
      DB_URL: ${DB_URL}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      # OpenTelemetry 설정
      OTEL_SERVICE_NAME: partner-openapi
      OTEL_RESOURCE_ATTRIBUTES: service.instance.id=partner-openapi
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://partner-openapi-alloy:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_METRIC_EXPORT_INTERVAL: 30000
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: 1
      OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  partner-openapi-alloy:
    image: grafana/alloy:latest
    container_name: partner-openapi-alloy
    ports:
      - '12346:12345'
    volumes:
      - ./partner-openapi/alloy/config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    command: >
      run --server.http.listen-addr=0.0.0.0:12345
          --storage.path=/var/lib/alloy/data
          /etc/alloy/config.alloy

  mysql:
    image: mysql:8.4
    container_name: mysql
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      TZ: Asia/Seoul
    ports:
      - '3306:3306'
    volumes:
      - mysql-data:/var/lib/mysql
      - ./infra/mysql/init:/docker-entrypoint-initdb.d
      - ./infra/mysql/config:/etc/mysql/conf.d
      - ./infra/mysql/logs:/var/log/mysql
    restart: unless-stopped
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-P", "3306", "-uroot", "-p${DB_ROOT_PASSWORD}" ]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s

  mysql_exporter:
    image: prom/mysqld-exporter
    container_name: mysql_exporter
    ports:
      - "9104:9104"
    volumes:
      - ./monitoring/prometheus/exporter/mysql/.my.cnf:/.my.cnf
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  redis:
    image: valkey/valkey:8.0.1
    container_name: redis
    volumes:
      - redis-data:/data
    ports:
      - '6379:6379'
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "valkey-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30

  redis-exporter:
    image: oliver006/redis_exporter
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: redis:6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki-data:/loki
    command:
      - '--config.file=/etc/loki/loki.yml'
    restart:
      unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
      - '--enable-feature=exemplar-storage'
      - '--enable-feature=native-histograms'
    restart:
      unless-stopped

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    ports:
      - "3200:3200"
    volumes:
      - ./monitoring/tempo:/etc/tempo
    command:
      - '--config.file=/etc/tempo/tempo.yml'
    restart:
      unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
    restart:
      unless-stopped

volumes:
  mysql-data:
  redis-data:
  prometheus-data:
  grafana-data:
  loki-data:
